[
  {
    "objectID": "draft-results.html",
    "href": "draft-results.html",
    "title": "Appendix B — Draft: Results",
    "section": "",
    "text": "C Results\nIn the Gulf of Mexico and the Atlantic Ocean, tornadoes that form over water (also known as “Waterspouts”) in shark-infested waters, that also move inwards towards land, do not have the potential to carry sharks over towards mainland cities to cause a disruption similar to the movie ‘Sharknado’.\nWhen plotting the data for sharks and waterspouts, it is apparent that waterspouts are not a common occurrence ( at least in the past five years ). These waterspouts have not caused any major damage to property or crops, and no deaths or injuries have been recorded, they either do not possess the strength to do so and many of these waterspouts do not last longer than an hour. The most action that has happened has been an incident where a waterspout damaged two vehicles and a power line, causing $5000 in damages. But when compared to tornadoes, this is very minuscule (Figure 1). This clearly shows that tornadoes that form on water lack the power necessary to lift sharks. In a perfect world, the better way to compare power is to compare levels on the Tor F Scale. The scale that ranks how strong a tornado is from EF1 to EF5. However, waterspouts are not considered tornadoes and they do not have a power scale similar to tornadoes.\n\n\n\n\n\n\nTitle of callout\n\n\n\nInside text\n\n\n\n# Load neccessary libraries \nlibrary(ggplot2)\nlibrary(readr)\nlibrary(readxl)\n\nWarning: package 'readxl' was built under R version 4.4.3\n\nlibrary(sf)\n\nLinking to GEOS 3.13.0, GDAL 3.10.1, PROJ 9.5.1; sf_use_s2() is TRUE\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(tidyverse)\n\nWarning: package 'tibble' was built under R version 4.4.3\n\n\nWarning: package 'purrr' was built under R version 4.4.3\n\n\nWarning: package 'stringr' was built under R version 4.4.3\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ lubridate 1.9.4     ✔ tibble    3.2.1\n✔ purrr     1.0.4     ✔ tidyr     1.3.1\n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(stringr)\nlibrary(mapdata)\n\nWarning: package 'mapdata' was built under R version 4.4.3\n\n\nLoading required package: maps\n\n\nWarning: package 'maps' was built under R version 4.4.3\n\n\n\nAttaching package: 'maps'\n\nThe following object is masked from 'package:purrr':\n\n    map\n\nlibrary(maps)\n\n\n# Tornado Data\n# NOAA / NCEI\ntornado_2020_2024_dataframe &lt;- bind_rows(\n  read_csv(\"Datasets/Tornado_Datasets/StormEvents_details-ftp_v1.0_d2024_c20250216.csv\"),\n  read_csv(\"Datasets/Tornado_Datasets/StormEvents_details-ftp_v1.0_d2023_c20250216.csv\"), \n  read_csv(\"Datasets/Tornado_Datasets/StormEvents_details-ftp_v1.0_d2022_c20241121.csv\"), \n  read_csv(\"Datasets/Tornado_Datasets/StormEvents_details-ftp_v1.0_d2021_c20240716.csv\"), \n  read_csv(\"Datasets/Tornado_Datasets/StormEvents_details-ftp_v1.0_d2020_c20240620.csv\"))\n\nRows: 67036 Columns: 51\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (26): STATE, MONTH_NAME, EVENT_TYPE, CZ_TYPE, CZ_NAME, WFO, BEGIN_DATE_T...\ndbl (25): BEGIN_YEARMONTH, BEGIN_DAY, BEGIN_TIME, END_YEARMONTH, END_DAY, EN...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nWarning: One or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat &lt;- vroom(...)\n  problems(dat)\n\n\nRows: 75596 Columns: 51\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (26): STATE, MONTH_NAME, EVENT_TYPE, CZ_TYPE, CZ_NAME, WFO, BEGIN_DATE_T...\ndbl (24): BEGIN_YEARMONTH, BEGIN_DAY, BEGIN_TIME, END_YEARMONTH, END_DAY, EN...\nlgl  (1): CATEGORY\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nRows: 69886 Columns: 51\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (26): STATE, MONTH_NAME, EVENT_TYPE, CZ_TYPE, CZ_NAME, WFO, BEGIN_DATE_T...\ndbl (25): BEGIN_YEARMONTH, BEGIN_DAY, BEGIN_TIME, END_YEARMONTH, END_DAY, EN...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nWarning: One or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat &lt;- vroom(...)\n  problems(dat)\n\n\nRows: 61389 Columns: 51\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (26): STATE, MONTH_NAME, EVENT_TYPE, CZ_TYPE, CZ_NAME, WFO, BEGIN_DATE_T...\ndbl (24): BEGIN_YEARMONTH, BEGIN_DAY, BEGIN_TIME, END_YEARMONTH, END_DAY, EN...\nlgl  (1): CATEGORY\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nRows: 61279 Columns: 51\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (26): STATE, MONTH_NAME, EVENT_TYPE, CZ_TYPE, CZ_NAME, WFO, BEGIN_DATE_T...\ndbl (25): BEGIN_YEARMONTH, BEGIN_DAY, BEGIN_TIME, END_YEARMONTH, END_DAY, EN...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n# Remove rows containing NA values and Keep the two events we are interested in\ntornado_2020_2024_clean_dataframe &lt;- tornado_2020_2024_dataframe %&gt;% \n  drop_na(BEGIN_LAT, BEGIN_LON, END_LON, END_LAT) %&gt;% \n  filter(str_detect(EVENT_TYPE, \"Tornado\") | str_detect(EVENT_TYPE, \"Waterspout\"))\n                                        \n# Filter for tornadoes that started in the Gulf of Mexico, Atlantic, or Pacific\nwaterspout_dataframe &lt;- tornado_2020_2024_clean_dataframe %&gt;%\n  filter(EVENT_TYPE == 'Waterspout')\n\n\n# Average Property Damage Caused by Tornadoes vs Waterspouts\n\nstr(tornado_2020_2024_clean_dataframe)\n\ntibble [8,671 × 51] (S3: tbl_df/tbl/data.frame)\n $ BEGIN_YEARMONTH   : num [1:8671] 202405 202411 202402 202402 202402 ...\n $ BEGIN_DAY         : num [1:8671] 19 5 27 27 27 27 27 27 27 27 ...\n $ BEGIN_TIME        : num [1:8671] 1839 1101 1932 1934 1815 ...\n $ END_YEARMONTH     : num [1:8671] 202405 202411 202402 202402 202402 ...\n $ END_DAY           : num [1:8671] 19 5 27 27 27 27 27 27 27 27 ...\n $ END_TIME          : num [1:8671] 1902 1102 1935 1937 1816 ...\n $ EPISODE_ID        : num [1:8671] 190905 196653 188190 188190 188190 ...\n $ EVENT_ID          : num [1:8671] 1184919 1216653 1155977 1155978 1155954 ...\n $ STATE             : chr [1:8671] \"OKLAHOMA\" \"IOWA\" \"ILLINOIS\" \"ILLINOIS\" ...\n $ STATE_FIPS        : num [1:8671] 40 19 17 17 17 17 18 17 17 17 ...\n $ YEAR              : num [1:8671] 2024 2024 2024 2024 2024 ...\n $ MONTH_NAME        : chr [1:8671] \"May\" \"November\" \"February\" \"February\" ...\n $ EVENT_TYPE        : chr [1:8671] \"Tornado\" \"Tornado\" \"Tornado\" \"Tornado\" ...\n $ CZ_TYPE           : chr [1:8671] \"C\" \"C\" \"C\" \"C\" ...\n $ CZ_FIPS           : num [1:8671] 39 51 31 31 103 89 89 89 89 37 ...\n $ CZ_NAME           : chr [1:8671] \"CUSTER\" \"DAVIS\" \"COOK\" \"COOK\" ...\n $ WFO               : chr [1:8671] \"OUN\" \"DMX\" \"LOT\" \"LOT\" ...\n $ BEGIN_DATE_TIME   : chr [1:8671] \"19-MAY-24 18:39:00\" \"05-NOV-24 11:01:00\" \"27-FEB-24 19:32:00\" \"27-FEB-24 19:34:00\" ...\n $ CZ_TIMEZONE       : chr [1:8671] \"CST-6\" \"CST-6\" \"CST-6\" \"CST-6\" ...\n $ END_DATE_TIME     : chr [1:8671] \"19-MAY-24 19:02:00\" \"05-NOV-24 11:02:00\" \"27-FEB-24 19:35:00\" \"27-FEB-24 19:37:00\" ...\n $ INJURIES_DIRECT   : num [1:8671] 0 0 0 0 0 0 0 0 0 0 ...\n $ INJURIES_INDIRECT : num [1:8671] 0 0 0 0 0 0 0 0 0 0 ...\n $ DEATHS_DIRECT     : num [1:8671] 0 0 0 0 0 0 0 0 0 0 ...\n $ DEATHS_INDIRECT   : num [1:8671] 0 0 0 0 0 0 0 0 0 0 ...\n $ DAMAGE_PROPERTY   : chr [1:8671] \"150.00K\" \"120.00K\" \"0.00K\" \"0.00K\" ...\n $ DAMAGE_CROPS      : chr [1:8671] \"0.00K\" \"0.00K\" \"0.00K\" \"0.00K\" ...\n $ SOURCE            : chr [1:8671] \"NWS Storm Survey\" \"Trained Spotter\" \"NWS Storm Survey\" \"NWS Storm Survey\" ...\n $ MAGNITUDE         : num [1:8671] NA NA NA NA NA NA NA NA NA NA ...\n $ MAGNITUDE_TYPE    : chr [1:8671] NA NA NA NA ...\n $ FLOOD_CAUSE       : chr [1:8671] NA NA NA NA ...\n $ CATEGORY          : num [1:8671] NA NA NA NA NA NA NA NA NA NA ...\n $ TOR_F_SCALE       : chr [1:8671] \"EF1\" \"EF0\" \"EF1\" \"EF1\" ...\n $ TOR_LENGTH        : num [1:8671] 6.7 0.32 2.58 2.45 0.05 1.16 2.17 2.8 8.13 2.59 ...\n $ TOR_WIDTH         : num [1:8671] 400 50 110 160 10 125 75 175 125 175 ...\n $ TOR_OTHER_WFO     : chr [1:8671] NA NA NA NA ...\n $ TOR_OTHER_CZ_STATE: chr [1:8671] NA NA NA NA ...\n $ TOR_OTHER_CZ_FIPS : chr [1:8671] NA NA NA NA ...\n $ TOR_OTHER_CZ_NAME : chr [1:8671] NA NA NA NA ...\n $ BEGIN_RANGE       : num [1:8671] 8 4 0 1 1 1 1 3 2 1 ...\n $ BEGIN_AZIMUTH     : chr [1:8671] \"WNW\" \"ESE\" \"SSE\" \"S\" ...\n $ BEGIN_LOCATION    : chr [1:8671] \"CUSTER CITY\" \"BELKNAP\" \"HOFFMAN ESTATES\" \"SOUTH BARRINGTON\" ...\n $ END_RANGE         : num [1:8671] 5 4 2 2 1 0 2 0 1 2 ...\n $ END_AZIMUTH       : chr [1:8671] \"N\" \"ESE\" \"S\" \"SSW\" ...\n $ END_LOCATION      : chr [1:8671] \"CUSTER CITY\" \"BELKNAP\" \"INVERNESS\" \"INVERNESS\" ...\n $ BEGIN_LAT         : num [1:8671] 35.7 40.8 42.1 42.1 41.7 ...\n $ BEGIN_LON         : num [1:8671] -99 -92.3 -88.1 -88.1 -89.1 ...\n $ END_LAT           : num [1:8671] 35.7 40.8 42.1 42.1 41.7 ...\n $ END_LON           : num [1:8671] -98.9 -92.3 -88.1 -88.1 -89.1 ...\n $ EPISODE_NARRATIVE : chr [1:8671] \"Significant severe weather occurred across portions of western into central Oklahoma from the late afternoon of\"| __truncated__ \"A brief tornado occurred with a shower in Davis County during the late morning.  Weak instability along a modes\"| __truncated__ \"Following summer-like, record warmth, severe thunderstorms developed in the late afternoon of February 27th ove\"| __truncated__ \"Following summer-like, record warmth, severe thunderstorms developed in the late afternoon of February 27th ove\"| __truncated__ ...\n $ EVENT_NARRATIVE   : chr [1:8671] \"While the large multiple-vortex tornado was approaching US-183 to the south, another tornado developed to the n\"| __truncated__ \"A brief tornado occurred south of Floris from a developing weak storm. The tornado moved across a farmstead on \"| __truncated__ \"This tornado touched down in the area near Della Drive in Hoffman Estates and tracked northeast, snapping tree \"| __truncated__ \"This tornado formed near Studio Drive in South Barrington, with the first damage observed at the South Barringt\"| __truncated__ ...\n $ DATA_SOURCE       : chr [1:8671] \"CSV\" \"CSV\" \"CSV\" \"CSV\" ...\n\ntornado_2020_2024_clean_dataframe &lt;- tornado_2020_2024_clean_dataframe %&gt;%\n  mutate(DAMAGE_PROPERTY = case_when(\n    str_detect(DAMAGE_PROPERTY, \"K$\") ~ as.numeric(str_remove(DAMAGE_PROPERTY, \"K\")) * 1000,\n    str_detect(DAMAGE_PROPERTY, \"M$\") ~ as.numeric(str_remove(DAMAGE_PROPERTY, \"M\")) * 1000000,\n    DAMAGE_PROPERTY == \"0.0K\" ~ 0, \n    TRUE ~ as.numeric(DAMAGE_PROPERTY)  \n  )) \n\nWarning: There were 3 warnings in `mutate()`.\nThe first warning was:\nℹ In argument: `DAMAGE_PROPERTY = case_when(...)`.\nCaused by warning:\n! NAs introduced by coercion\nℹ Run `dplyr::last_dplyr_warnings()` to see the 2 remaining warnings.\n\nproperty_damage_summary &lt;- tornado_2020_2024_clean_dataframe %&gt;%\n  group_by(EVENT_TYPE) %&gt;%\n  summarize(Average_Property_Damage = mean(DAMAGE_PROPERTY, na.rm = TRUE))\n\nggplot(property_damage_summary, aes(x = EVENT_TYPE, y = Average_Property_Damage)) + geom_col() + labs( title = \"Average Property Damage Caused by Tornadoes and Waterspouts 2020-2024\", x = \"Event Type\", y = \"Cost of Damage ($)\") + theme_minimal()\n\n\n\n\n\n\n\n\nFigure 1. Average Property Damage Caused by Tornadoes and Waterspouts : Waterspouts are so pathetic when compared to tornadoes. Their damage is not even visible in the graph. Their average in property damage is a measly $7.96, it cannot compare to tornadoes.\nWaterspouts or Tornadoes that pass through shark-infested waters and back towards cities are not that common\nWhen taking a look at where waterspouts form and where the shark infested waters of America are we can refer to Figure 2. Waterspouts are very uncommon, and even if they form near these waters with sharks, our findings support they have zero potential for a Sharknado. Our coastal cities (highlighted in red), show how near they are to shark infested waters and waterspouts.\n\n# Let's first plot the coastal areas \n\n# coastal data\ncoastal_dataframe &lt;- \n  read_sf(\"Datasets/Coastal Datasets/CZMP_counties_2009/CZMP_counties_2009.shp\")\n\nggplot(data = coastal_dataframe) + \n  geom_sf(aes(geometry = geometry))\n\n\n\n\n\n\n\n# We see we have the coasts of most of the US mapped out, including Alaska and Hawaii,\n\n# Let's add a world map to see where those other coasts are from\nworld &lt;- map_data('world')\nstates &lt;- map_data('state')\n\nggplot(world) +\n  geom_polygon(data = world, aes(x = long, y = lat, group = group), \n               fill = \"gray\", color = \"black\") +\n  geom_polygon(data = states, aes(x = long, y = lat, group = group), \n               fill = \"gray\", color = \"black\") +\n  theme_bw() +  \n  geom_sf(aes(geometry = geometry), color = 'red', data = coastal_dataframe)\n\n\n\n\n\n\n\n# Ok so from the new map we can see where exactly the coastal data is from \n\n# Let's look at the US individually first, then Hawaii, then Alaska\n\nggplot(world) +\n  geom_polygon(data = world, aes(x = long, y = lat, group = group), \n               fill = \"gray\", color = \"black\") +\n  geom_polygon(data = states, aes(x = long, y = lat, group = group), \n               fill = \"gray\", color = \"black\") +\n  theme_bw() +  \n  geom_sf(aes(geometry = geometry), fill = 'red', color = 'red', data = coastal_dataframe) +\n  coord_sf(xlim = c(-130, -60), ylim = c(20, 55))\n\n\n\n\n\n\n\n# Let's Plot some shark data\nshark_survey_dataframe &lt;- read_excel(\"Datasets/Shark Datasets/NMFS BLL data Susan V.xlsx\")\nshark_dataframe &lt;- read_csv(\"Datasets/Shark Datasets/Biological _Data_SBK.csv\")\n\nNew names:\nRows: 99 Columns: 26\n── Column specification\n──────────────────────────────────────────────────────── Delimiter: \",\" chr\n(14): Shark_Number...1, Gear_code, Gear_Description, Location_Code, Loca... dbl\n(12): Month, Day, Year, Latitude, Longitude, Fork_length, Stomach Weight...\nℹ Use `spec()` to retrieve the full column specification for this data. ℹ\nSpecify the column types or set `show_col_types = FALSE` to quiet this message.\n• `Shark_Number` -&gt; `Shark_Number...1`\n• `Shark_Number` -&gt; `Shark_Number...16`\n\nggplot(world) +\n  geom_polygon(data = world, aes(x = long, y = lat, group = group), \n               fill = \"gray\", color = \"black\") +\n  geom_polygon(data = states, aes(x = long, y = lat, group = group), \n               fill = \"gray\", color = \"black\") +\n  theme_bw() +  \n  geom_sf(aes(geometry = geometry), fill = 'red', color = 'red', data = coastal_dataframe) +\n  coord_sf(xlim = c(-130, -60), ylim = c(20, 55)) + \n  geom_point(aes(x = Longitude, y = Latitude), color = 'blue', fill = 'blue',alpha = 0.5, size = 0.5, data = shark_dataframe) +\n  geom_point(aes(x = `Station Longitude`, y = `Station Latitude`), color = 'skyblue', fill = 'skyblue', alpha = 0.5, size = 0.6, data = shark_survey_dataframe)\n\nWarning: Removed 27 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n# Now let's see the path of tornadoes in the US\n\n######## tornado data\n\nggplot(world) +\n  geom_polygon(data = world, aes(x = long, y = lat, group = group), \n               fill = \"gray\", color = \"black\") +\n  geom_polygon(data = states, aes(x = long, y = lat, group = group), \n               fill = \"gray\", color = \"black\") +\n  theme_bw() +  \n  geom_sf(aes(geometry = geometry), color = 'red', data = coastal_dataframe) +\n  coord_sf(xlim = c(-130, -60), ylim = c(20, 55)) + \n  geom_point(aes(x = Longitude, y = Latitude, color = 'Shark'), fill = 'skyblue',alpha = 0.5, size = 0.5, data = shark_dataframe) +\n  geom_point(aes(x = `Station Longitude`, y = `Station Latitude`, color = 'Shark'), fill = 'skyblue', alpha = 0.5, size = 0.6, data = shark_survey_dataframe) +\n  geom_segment(data = waterspout_dataframe,aes(x = BEGIN_LON, y = BEGIN_LAT, \n                                                 xend = END_LON, yend = END_LAT, color = \"Waterspout\"),\n               arrow = arrow(length = unit(0.05, \"cm\"))  # Optional arrow\n               ) +\n  geom_point(data = waterspout_dataframe, aes(x = BEGIN_LON, y = BEGIN_LAT, color = \"Waterspout\"), \n             shape = 15,  # Square shape\n             size = 0.1) +\n  labs(title = \"US Waterspouts and Sharks Along US Coastlines\",\n       x = \"Longitude\",\n       y = \"Latitude\", \n       color = \"Legend\") + scale_color_manual(values = c(\"Shark\" = \"skyblue\", \"Waterspout\" = \"blue\")) \n\nWarning: Removed 27 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n# Hawaii \n\nggplot(world) +\n  geom_polygon(data = world, aes(x = long, y = lat, group = group), \n               fill = \"gray\", color = \"black\") +\n  geom_polygon(data = states, aes(x = long, y = lat, group = group), \n               fill = \"gray\", color = \"black\") +\n  theme_bw() +  \n  geom_sf(aes(geometry = geometry), color = 'red', data = coastal_dataframe) +\n  coord_sf(xlim = c(-170, -150), ylim = c(18, 30)) + \n  geom_point(aes(x = Longitude, y = Latitude, color = 'Shark'), fill = 'skyblue',alpha = 0.5, size = 0.5, data = shark_dataframe) +\n  geom_point(aes(x = `Station Longitude`, y = `Station Latitude`, color = 'Shark'), fill = 'skyblue', alpha = 0.5, size = 0.6, data = shark_survey_dataframe) +\n  geom_segment(data = waterspout_dataframe,aes(x = BEGIN_LON, y = BEGIN_LAT, \n                                               xend = END_LON, yend = END_LAT, color = \"Waterspout\"),\n               arrow = arrow(length = unit(0.05, \"cm\"))  # Optional arrow\n  ) +\n  geom_point(data = waterspout_dataframe, aes(x = BEGIN_LON, y = BEGIN_LAT, color = \"Waterspout\"), \n             shape = 15,  # Square shape\n             size = 0.1) +\n  labs(title = \"US Waterspouts and Sharks Along Hawaii Coastlines\",\n       x = \"Longitude\",\n       y = \"Latitude\", \n       color = \"Legend\") + scale_color_manual(values = c(\"Shark\" = \"skyblue\", \"Waterspout\" = \"blue\")) \n\nWarning: Removed 27 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n# Zoomed Gulf and Atlantic\n\nggplot(world) +\n  geom_polygon(data = world, aes(x = long, y = lat, group = group), \n               fill = \"gray\", color = \"black\") +\n  geom_polygon(data = states, aes(x = long, y = lat, group = group), \n               fill = \"gray\", color = \"black\") +\n  theme_bw() +  \n  geom_sf(aes(geometry = geometry), color = 'red', data = coastal_dataframe) +\n  coord_sf(xlim = c(-100, -65), ylim = c(20, 50)) + \n  geom_point(aes(x = Longitude, y = Latitude, color = 'Shark'), fill = 'skyblue',alpha = 0.5, size = 0.5, data = shark_dataframe) +\n  geom_point(aes(x = `Station Longitude`, y = `Station Latitude`, color = 'Shark'), fill = 'skyblue', alpha = 0.5, size = 0.6, data = shark_survey_dataframe) +\n  geom_segment(data = waterspout_dataframe,aes(x = BEGIN_LON, y = BEGIN_LAT, \n                                               xend = END_LON, yend = END_LAT, color = \"Waterspout\"),\n               arrow = arrow(length = unit(0.05, \"cm\"))  # Optional arrow\n  ) +\n  geom_point(data = waterspout_dataframe, aes(x = BEGIN_LON, y = BEGIN_LAT, color = \"Waterspout\"), \n             shape = 15,  # Square shape\n             size = 0.1) +\n  labs(title = \"US Waterspouts and Sharks Along The Gulf and Atlantic Coastlines\",\n       x = \"Longitude\",\n       y = \"Latitude\", \n       color = \"Legend\") + scale_color_manual(values = c(\"Shark\" = \"skyblue\", \"Waterspout\" = \"blue\")) \n\nWarning: Removed 27 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\n\n# California\nggplot(world) +\n  geom_polygon(data = world, aes(x = long, y = lat, group = group), \n               fill = \"gray\", color = \"black\") +\n  geom_polygon(data = states, aes(x = long, y = lat, group = group), \n               fill = \"gray\", color = \"black\") +\n  theme_bw() +  \n  geom_sf(aes(geometry = geometry), color = 'red', data = coastal_dataframe) +\n  coord_sf(xlim = c(-125, -112.5), ylim = c(30, 50)) + \n  geom_point(aes(x = Longitude, y = Latitude, color = 'Shark'), fill = 'skyblue',alpha = 0.5, size = 0.5, data = shark_dataframe) +\n  geom_point(aes(x = `Station Longitude`, y = `Station Latitude`, color = 'Shark'), fill = 'skyblue', alpha = 0.5, size = 0.6, data = shark_survey_dataframe) +\n  geom_segment(data = waterspout_dataframe,aes(x = BEGIN_LON, y = BEGIN_LAT, \n                                               xend = END_LON, yend = END_LAT, color = \"Waterspout\"),\n               arrow = arrow(length = unit(0.05, \"cm\"))  # Optional arrow\n  ) +\n  geom_point(data = waterspout_dataframe, aes(x = BEGIN_LON, y = BEGIN_LAT, color = \"Waterspout\"), \n             shape = 15,  # Square shape\n             size = 0.1) +\n  labs(title = \"US Waterspouts and Sharks Along California Coastline\",\n       x = \"Longitude\",\n       y = \"Latitude\", \n       color = \"Legend\") + scale_color_manual(values = c(\"Shark\" = \"skyblue\", \"Waterspout\" = \"blue\")) \n\nWarning: Removed 27 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\n:::",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>Draft: Results</span>"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "1.1 Big Picture",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "intro.html#big-picture",
    "href": "intro.html#big-picture",
    "title": "1  Introduction",
    "section": "",
    "text": "1.1.1 Who is my audience\n\n1.1.1.1 Boss who is scared of a sharknado could occur in real life\n\n1.1.1.1.1 Talk about what Tornadoes that form over water are called\n\n\n1.1.1.1.2 Discuss the differences between Tornadoes and Waterspouts\n\n1.1.1.1.2.1 Explain why these differences matter\n\n\n1.1.1.1.2.2 IRL a sharknado would be classified as a Waterspout that transitions into a tornado when it moves over land\n\nA waterspout would then be classified as a tornado\n\n\n\n\n1.1.1.1.3 Discuss basic information about the shark population around coastal areas",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "intro.html#establish-a-niche",
    "href": "intro.html#establish-a-niche",
    "title": "1  Introduction",
    "section": "1.2 Establish a niche",
    "text": "1.2 Establish a niche\n\n1.2.1 Problem : Can we predict if a sharknado will ever be possibe to occur IRL using exisiting data about sharks and tornadoes\n\n\n1.2.2 Gap in Knowledge\n\n1.2.2.1 Waterspouts are not classified as tornadoes, so many do not have a Tor F Scale to judge how powerful they are\n\n\n1.2.2.2 Using shark data that is from a different time period of our Tornado Data??",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "intro.html#occupy-a-niche",
    "href": "intro.html#occupy-a-niche",
    "title": "1  Introduction",
    "section": "1.3 Occupy a Niche",
    "text": "1.3 Occupy a Niche\n\n1.3.1 How does the work approach the niche that’s been identified\n\n\n1.3.2 What approaches are being used\n\n1.3.2.1 Not detailed methods, but past literature on how those methods were established may be useful\n\n\n\n1.3.3 How does the answer solve the open problem",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "intro.html#state-central-questionapproach-or-summary-of-results",
    "href": "intro.html#state-central-questionapproach-or-summary-of-results",
    "title": "1  Introduction",
    "section": "1.4 State central question/approach OR Summary of results",
    "text": "1.4 State central question/approach OR Summary of results\nThis is a book created from markdown and executable code.\nSee Knuth (1984) for additional discussion of literate programming.\n\n\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput. J. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "draft-intro-conclusions.html",
    "href": "draft-intro-conclusions.html",
    "title": "Appendix C — Draft: Intro/Conclusions",
    "section": "",
    "text": "D Introduction",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>C</span>  <span class='chapter-title'>Draft: Intro/Conclusions</span>"
    ]
  },
  {
    "objectID": "draft-intro-conclusions.html#a-real-life-sharknado",
    "href": "draft-intro-conclusions.html#a-real-life-sharknado",
    "title": "Appendix C — Draft: Intro/Conclusions",
    "section": "D.1 A Real Life Sharknado?",
    "text": "D.1 A Real Life Sharknado?\nThere is a growing concern over the possibility of a real life Sharknado, a tornado that forms over water, gathers sharks in its powerful vortex, and then travels onto land, carrying the sharks with it. These sharknados wreak havoc all throughout the United States in locations like Los Angeles, New York City, and even Washington D.C. all the way down to Orlando, Florida raining sharks down from the sky. There have been circumstances where tornadoes have picked up animals such as fish and frogs, if one’s imagination is not limited, one could see it be possible for tornadoes to carry sharks. Although this concept originates science fiction movie series, it raises serious questions on how thin the line between fiction and reality might be when it comes to such a catastrophic event.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>C</span>  <span class='chapter-title'>Draft: Intro/Conclusions</span>"
    ]
  },
  {
    "objectID": "draft-intro-conclusions.html#tornadoes-and-sharks",
    "href": "draft-intro-conclusions.html#tornadoes-and-sharks",
    "title": "Appendix C — Draft: Intro/Conclusions",
    "section": "D.2 Tornadoes and Sharks",
    "text": "D.2 Tornadoes and Sharks\nTo help figure out how a sharknado would be possible, the strenghts and conditions of tornadoes must be analyzed to see how they could carry these apex marine predators.\n\nD.2.1 How Strong can a Tornado Be?\nThe Enhanced Fujita Scale (EF Scale), which is used to assign a tornado a rating based on estimated wind speeds. The scores and their estimated wind speeds go as follows:\n\nEF0 (Weakest)\n\n65 - 85 mph\n\nEF1\n\n86 - 110 mph\n\nEF2\n\n111 - 135 mph\n\nEF3\n\n136 - 165 mph\n\nEF4\n\n166 - 200 mph\n\nEF5 (Strongest)\n\nOver 200 mph\n\n\nMinor damage such as broken tree branches and roof shingles being blown away can be expected from EF0 tornadoes. While on the other end of the spectrum, EF5 tornadoes can promise wind speeds that can decimate well built homes and infrastructure. These tornadoes can carry objects like cars with no trouble.\n\n\nD.2.2 Tornado or Waterspout?\nThis sharknado would need to have a tornado that forms over shark infested waters. A tornado that forms over water is usually classified as a waterspout. Waterspouts are not classified as tornadoes, so they are not given a score on the EF scale. If a waterspout moves on shore however, The National Weather Service classifies it as a tornado and issues a tornado warning for the area.\nWaterspouts are generally broken into two categories: fair weather waterspouts and tornadic waterspouts. Fair weather waterspouts to put it simply are a less dangerous event that form during relatively calm weather and are not associated with thunderstorms. The phenonema of interest are tornadic waterspouts. These have the same characteristics of a land tornado, they are often accompanied by high winds, severe thunderstorms, large hail. It is essentially a tornado that forms over water, but it can also form by a tornado moving from land to water. If a sharknado would occur this is how it would form!\n\n\nD.2.3 Sharks in Infested Waters in the United Sates\nSharks are found in coastal waters along the East Coast, Gulf of Mexico, and the Caribbeans. These waters are where a sharknado would have to form.\nSharks vary greatly in size and weight. Some common sharks and their average adult weights include:\n\nAtlantic Sharpnose\n\n15 - 25 lbs\n\nAtlantic Blacktip\n\n66 - 200 lbs\n\nTiger\n\n850 - 1400 lbs\n\nHammerhead\n\n500 - 1000 lbs\n\nSandtiger\n\n200 - 350 lbs\n\nThe Great White\n\n1500 - 2400 lbs\n\n\nThe sharks that were commonly seen inside the sharknado were the tiger shark, the hammerhead shark, and of course, the great white shark.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>C</span>  <span class='chapter-title'>Draft: Intro/Conclusions</span>"
    ]
  },
  {
    "objectID": "draft-intro-conclusions.html#can-a-sharknado-actually-occur",
    "href": "draft-intro-conclusions.html#can-a-sharknado-actually-occur",
    "title": "Appendix C — Draft: Intro/Conclusions",
    "section": "D.3 Can a Sharknado Actually Occur?",
    "text": "D.3 Can a Sharknado Actually Occur?\nIs it possible to predict if a sharknado can happen in real life. using exisiting data about sharks and tornadoes from years past?\nTo answer this burning question, a scrutinizing look at meteorological and marine data must be done.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>C</span>  <span class='chapter-title'>Draft: Intro/Conclusions</span>"
    ]
  },
  {
    "objectID": "draft-intro-conclusions.html#tornadic-waterspouts-powerful-enough-to-carry-sharks-and-makes-landfall-is-an-unlikely-event",
    "href": "draft-intro-conclusions.html#tornadic-waterspouts-powerful-enough-to-carry-sharks-and-makes-landfall-is-an-unlikely-event",
    "title": "Appendix C — Draft: Intro/Conclusions",
    "section": "E.1 Tornadic Waterspouts Powerful Enough to Carry Sharks And Makes Landfall is an Unlikely Event",
    "text": "E.1 Tornadic Waterspouts Powerful Enough to Carry Sharks And Makes Landfall is an Unlikely Event\nKey findings suggest that a sharknado is not likely to occur. Waterspouts do tend to form in shark infested waters, but these are not powerful enough to lift sharks that can weight up to 2400 lbs and relocate them to land.\n\nE.1.1 There is a Little Amount of Tornadoes with a High Enough EF Scale that form near the coasts",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>C</span>  <span class='chapter-title'>Draft: Intro/Conclusions</span>"
    ]
  }
]